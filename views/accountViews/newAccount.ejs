<% layout("layouts/boilierplate")%>
    <link rel="stylesheet" href="/stylesheets/allBank.css">
    <h1>Create a New Account</h1>
    <form action="/accountViews" method="post" novalidate class="validated-form">
        <div class="mb-3">
            <label for="accountType">Account Type:</label>
            <select class="form-select" aria-label="Default select example" name="account[accountType]" id="accountType"
                required>
                <option value="" disabled selected>Select account type</option>
                <option value="Savings">Savings</option>
                <option value="Checkings">Checkings</option>
            </select>
            <div class="valid-feedback"> Looks Good!</div>
        </div>


        <% let notBlocked=true; for(let account of accounts) { if(account.isFrozen) { notBlocked=false; break; } } %>

            <% if(notBlocked) {%>
                <button type="submit" class="btn btn-success">Create Account</button>
                <% } else {%>
                    <p>Can not create a new account while one of your accounts is frozen</p>
                    <% } %>
    </form>


    <form action="/accountViews/<%= accounts[0]._id %>/requests/creditCardRequests" method="post" novalidate
        class="validated-form">
        <input type="hidden" name="accountFrom" value="<%= accounts[0]._id %>">

        <div class="mb-3">
            <h1>Request Credit Card Approval</h1>

            <label for="cardType">Which card would you like to apply for?</label>
            <select class="form-select" aria-label="Default select example" name="account[cardType]" id="cardType"
                required>
                <option value="" disabled selected>Select Credit Card:</option>
                <option value="Saphire">Saphire</option>
                <option value="Ruby">Ruby</option>
                <option value="Emerald">Emerald</option>
            </select>



            <label for="employmentStatus">Employment Status:</label>
            <select class="form-select" aria-label="Default select example" name="account[employmentStatus]"
                id="employmentStatus" required>
                <option value="" disabled selected>Select Employment Status:</option>
                <option value="Unemployed">Unemployed</option>
                <option value="FullTime">Working Full time</option>
                <option value="PartTime">Working Part time</option>
            </select>

            <label for="grossIncomeCredit">Total Gross Income: </label>
            <input type="text" class="form-control" id="grossIncomeCredit" name="account[grossIncome]" required>


            <button type="submit" class="btn btn-success">Request</button>
        </div>
    </form>




    <form action="/accountViews/<%= accounts[0]._id %>/requests/loanRequests" method="post" novalidate
        class="validated-form">
        <input type="hidden" name="accountFrom" value="<%= accounts[0]._id %>">
        <h1>Loan Request</h1>

        <label for="loanAmount">Loan Amount:</label>
        <input type="text" class="form-control" id="loanAmount" name="account[loanAmount]" required>


        <label for="grossIncome">Total Gross Income: </label>
        <input type="text" class="form-control" id="grossIncome" name="account[grossIncome]" required>


        <label for="loanType">Loan Type:</label>
        <select class="form-select" aria-label="Default select example" name="account[loanType]" id="loanType" required>
            <option value="" disabled selected>Select Loan Type:</option>
            <option value="House">House Mortagage</option>
            <option value="Car">Car Loan</option>
            <option value="Buisness">Buisness Loan</option>
            <option value="Student">Student Loan</option>
            <option value="Personal">Personal Loan</option>
        </select>


        <label for="loanTerm">Loan Term:</label>
        <select class="form-select" aria-label="Default select example" name="account[loanTerm]" id="loanTerm" required>
            <option value="" disabled selected>Select Loan Term:</option>
            <option value="threeYear">3 years</option>
            <option value="fiveYear">5 years</option>
            <option value="tenYear">10 years</option>
            <option value="twentyYear">20 years</option>
            <option value="thirtyYear">30 years</option>
        </select>



        <div class="mb-3">
            <label for="minimumMonthly" class="form-label">Minimum Monthly (based off your income): </label>
            <input type="text" class="form-control" id="minimumMonthly" name="account[minimumMonthly]" readonly>
            <div class="valid-feedback"> Looks Good!</div>
        </div>

        <button type="submit" class="btn btn-success">Request</button>
    </form>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const grossIncomeInput = document.getElementById('grossIncome');
            const loanAmountInput = document.getElementById('loanAmount');
            const loanTermSelect = document.getElementById('loanTerm');
            const loanTypeSelect = document.getElementById('loanType'); // Assuming you have a select element for loan types
            const minimumMonthlyInput = document.getElementById('minimumMonthly');

            function calculateLoanPayment(amount, annualRate, termYears) {
                const monthlyRate = annualRate / 12;
                const totalPayments = termYears * 12;
                return amount * monthlyRate * Math.pow(1 + monthlyRate, totalPayments) / (Math.pow(1 + monthlyRate, totalPayments) - 1);
            }

            function getInterestRateBasedOnLoanAndIncome(loanType, grossIncome) {
                const income = parseFloat(grossIncome);
                let baseRate;
                let incomeRateAdjustment;

                // Define base rates for different loan types
                switch (loanType) {
                    case 'House':
                        baseRate = 0.08; // Base rate for House Mortgage
                        break;
                    case 'Car':
                        baseRate = 0.07; // Base rate for Car Loan
                        break;
                    case 'Business':
                        baseRate = 0.06; // Base rate for Business Loan
                        break;
                    case 'Student':
                        baseRate = 0.035; // Base rate for Student Loan
                        break;
                    case 'Personal':
                        baseRate = 0.06; // Base rate for Personal Loan
                        break;
                    default:
                        baseRate = 0.05; // Default rate if none selected
                }

                // Define adjustments based on income brackets
                if (income < 20000) {
                    incomeRateAdjustment = 0.01; // Higher risk, higher rate
                } else if (income >= 20000 && income < 50000) {
                    incomeRateAdjustment = 0.005;
                } else if (income >= 50000 && income < 100000) {
                    incomeRateAdjustment = 0;
                } else if (income >= 100000) {
                    incomeRateAdjustment = -0.005; // Lower risk, lower rate
                } else {
                    incomeRateAdjustment = 0; // Default case if income is not a number
                }

                // Adjust base rate by the incomeRateAdjustment
                let adjustedRate = baseRate + incomeRateAdjustment;

                // Ensure the adjusted rate does not fall below a minimum threshold
                let minimumRateThreshold = 0.02; // Example minimum rate
                if (adjustedRate < minimumRateThreshold) {
                    adjustedRate = minimumRateThreshold;
                }

                return adjustedRate;
            }

            function updateMinimumMonthly() {
                const loanAmount = parseFloat(loanAmountInput.value);
                const loanTerm = loanTermSelect.value;
                const grossIncome = grossIncomeInput.value;
                const loanType = loanTypeSelect.value;
                let termLengthInYears;
                let annualInterestRate;

                switch (loanTerm) {
                    case 'threeYear':
                        termLengthInYears = 3;
                        break;
                    case 'fiveYear':
                        termLengthInYears = 5;
                        break;
                    case 'tenYear':
                        termLengthInYears = 10;
                        break;
                    case 'twentyYear':
                        termLengthInYears = 20;
                        break;
                    case 'thirtyYear':
                        termLengthInYears = 30;
                        break;
                    default:
                        termLengthInYears = 0;
                }

                annualInterestRate = getInterestRateBasedOnLoanAndIncome(loanType, grossIncome);

                if (!isNaN(loanAmount) && termLengthInYears > 0) {
                    const minimumMonthly = calculateLoanPayment(loanAmount, annualInterestRate, termLengthInYears);
                    minimumMonthlyInput.value = minimumMonthly.toFixed(2);
                } else {
                    minimumMonthlyInput.value = '';
                }
            }

            grossIncomeInput.addEventListener('input', updateMinimumMonthly);
            loanAmountInput.addEventListener('input', updateMinimumMonthly);
            loanTermSelect.addEventListener('change', updateMinimumMonthly);
            loanTypeSelect.addEventListener('change', updateMinimumMonthly); // Listen to changes in the loan type as well
        });
    </script>


    <script>
        document.getElementById('grossIncomeCredit' || 'loanAmount' || 'grossIncome').addEventListener('keydown', function (event) {
            if (!event.key.match(/[0-9]/) && event.key !== 'Backspace' && event.key !== 'Tab' && event.key !== 'Enter' && event.key !== 'ArrowLeft' && event.key !== 'ArrowRight' && event.key !== 'Delete') {
                event.preventDefault();
            }
        });
    </script>


    <script>
        document.getElementById('loanAmount').addEventListener('keydown', function (event) {
            if (!event.key.match(/[0-9]/) && event.key !== 'Backspace' && event.key !== 'Tab' && event.key !== 'Enter' && event.key !== 'ArrowLeft' && event.key !== 'ArrowRight' && event.key !== 'Delete') {
                event.preventDefault();
            }
        });
    </script>


    <script>
        document.getElementById('grossIncome').addEventListener('keydown', function (event) {
            if (!event.key.match(/[0-9]/) && event.key !== 'Backspace' && event.key !== 'Tab' && event.key !== 'Enter' && event.key !== 'ArrowLeft' && event.key !== 'ArrowRight' && event.key !== 'Delete') {
                event.preventDefault();
            }
        });
    </script>